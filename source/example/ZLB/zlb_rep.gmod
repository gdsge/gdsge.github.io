% Parameters
parameters beta alpha eta delta epsilon sigma R_zlb theta xi chi R_ss phi_pi phi_Y Y_ss pii_ss pii_lb pii_low pii_ub priceAdjCostFactor maxPriceAdjCostFactor overwrite_current_value is_iter;
parameters c_scale Y_scale flow_scale price_adj_func;
parameters PRICE_ADJ_FUNC_SQR;
parameters muEps_g muEps_cw muEps_fw rho_g rho_cw rho_fw g_ub g_lb cw_ub cw_lb fw_ub fw_lb;

var_others phillipsSlope;

c_scale = 1.5;
Y_scale = 3;
flow_scale = 10;

beta = 0.995;
alpha = 0.35;
eta = 1.0;
delta = 0.025;
epsilon = 21;
sigma = 1;
theta = 100; % Price Adjustment cost
R_zlb = 1.0; % ZLB
phi_Y = 0.0;
Y_ss = 2.5882;
xi = 10; % capital adjustment cost
chi = 0; % entrepreneur population
overwrite_current_value = 0;
b_last_consis = 0;
is_iter = 1;
is_simu_iter = 0;

PRICE_ADJ_FUNC_SQR=1;
price_adj_func = PRICE_ADJ_FUNC_SQR;

ADAPTIVE_FACTOR = 1.1;

priceAdjCostFactor = 0.0;
maxPriceAdjCostFactor = 1e-3;

R_ss = 1.01;
pii_ss = 1.00;
phi_pi = 1.5;
pii_ub = 1.2;
pii_lb = 0.8;
pii_low = 0.95;

USE_SPLINE = 1;
InterpOrder = 2;
ExtrapOrder = 2;
USE_ASG = 0;
AsgMaxLevel = 4;
AsgMinLevel = 4;
AsgThreshold = 1e-2;

TolEq = 1e-6;
PrintFreq = 1;
SaveFreq = 50;

SimuSaveFreq = inf;
SimuInterp = 0;
SimuResolve = 1;

NumThreads = feature('NumCores');

% Shocks
var_shock g_incr cw_incr fw_incr;
%
g_bar = 0.0047;
g_std = 0.0130;
rho_g = 0.22;
stdEps_g = sqrt(g_std^2 * (1-rho_g^2));
muEps_g = g_bar*(1-rho_g);
g_lb = g_bar - 2*g_std;
g_ub = g_bar + 2*g_std;
g_incr_grid = [-stdEps_g,stdEps_g];
g_incr_trans = 0.5*ones(2,2);

% consumption wedge
muEps_cw = -0.0014926;
rho_cw = 0.67758;
stdEps_cw = 0.00323;
cw_bar = muEps_cw/(1-rho_cw);
cw_std = stdEps_cw / sqrt((1-rho_cw^2));
cw_incr_grid = [-stdEps_cw,stdEps_cw];
cw_incr_trans = 0.5*ones(2,2);
cw_lb = cw_bar - 3*cw_std;
cw_ub = cw_bar + 3*cw_std;
		  
% financial wedge
muEps_fw = -0.0067826;
rho_fw = 0.4701;
stdEps_fw = 0.0123;
fw_bar = muEps_fw/(1-rho_fw);
fw_std = stdEps_fw / sqrt((1-rho_fw^2));
fw_incr_grid = [-stdEps_fw,stdEps_fw];
fw_incr_trans = 0.5*ones(2,2);
fw_lb = fw_bar - 3*fw_std;
fw_ub = fw_bar + 3*fw_std;

shock_trans = kron(cw_incr_trans,g_incr_trans);
shock_trans = kron(fw_incr_trans,shock_trans);

[g_incr,cw_incr,fw_incr] = ndgrid(g_incr_grid,cw_incr_grid,fw_incr_grid);
g_incr = g_incr(:);
cw_incr = cw_incr(:);
fw_incr = fw_incr(:);

shock_num = 8;

%%%%%%%%%%%%%%%% States %%%%%%%%%%%%%%%%%%%
var_state K g cw fw;
K_min = 25;
K_max = 40;
K_shift = 10;
K_pts = 41;
K = exp(linspace(log(K_min+K_shift),log(K_max+K_shift),K_pts)) - K_shift;

g_pts = 5;
g = linspace(g_lb,g_ub,g_pts);
cw_pts = 5;
cw = linspace(cw_lb,cw_ub,cw_pts);
fw_pts = 5;
fw = linspace(fw_lb,fw_ub,fw_pts);

% Initial period
var_policy_init pii inv_X K_next c mu_pii;
inbound_init pii pii_low 2.0;
inbound_init inv_X 0.0 1.4;
inbound_init K_next 0.0 60;
inbound_init c  0.0 10;
inbound_init mu_pii 0.0 1.0;

var_aux_init Y rK qK profits c_future rK_plus_qK;

model_init;
  A = 1;

  % capital prices
  qK = (1-delta) - xi/2*(1-(K_next*(1+g)/K)^2);
  qKp = 1 + xi*((1+g)*K_next-K)/K;
  
  % Eliminate L
  L = ( (1-alpha)*inv_X * A^(1-alpha) * (1+g)^(-alpha) * K^alpha * c^(-sigma) )^(1 / (alpha+eta-1));
  
  % Output and total wealth
  Y = A^(1-alpha)*(1+g)^(-alpha)*K^alpha*L^(1-alpha);
  % Taylor rule
  R_tilde = R_ss * (pii/pii_ss)^phi_pi * (Y/Y_ss)^phi_Y;
  R = MAX(R_zlb,R_tilde);
  % priceAdjCost = MIN(1/2*theta*(pii-pii_ss)^2*Y,maxPriceAdjCostFactor*Y);
  if price_adj_func==PRICE_ADJ_FUNC_SQR
    priceAdjCost = MIN(((pii-pii_ub)/((pii_ub-pii_lb)^0.5) - 2*(pii-pii_lb)^0.5 + 2*(pii_ub-pii_lb)^0.5) * theta * Y,maxPriceAdjCostFactor*Y);
  end
  profits = (1-inv_X)*Y - priceAdjCost;
  
  % Factor prices
  rK = alpha*inv_X *A^(1-alpha)*(1+g)^(1-alpha) * K^(alpha-1) * L^(1-alpha);
  w = (1-alpha)*inv_X *A^(1-alpha)*(1+g)^(-alpha)* K^alpha *L^(-alpha);
  
  % Next period mpk
  rK_future = alpha*K_next^(alpha-1);
  qK_future = 0;
  
  % Next period consumption
  c_future = K_next^alpha;
  
  % budget
  capitalAdjCost = K_next - (1-delta)/(1+g)*K + xi/2*(K_next-K/(1+g))^2/(K/(1+g));
  % budget_residual = omega*total_wealth + w*L_e - (c+qKp*K_next+b/R);
  resource_residual = Y - (capitalAdjCost+c);
  
  % foc
  foc_bond = -1 + beta*R*exp(cw)*(c_future^-sigma)/(c^-sigma);
  foc_investment = -1 + beta*exp(fw)*(rK_future+qK_future)*(c_future^-sigma)/(qKp*c^-sigma);
  
  %
  if price_adj_func==PRICE_ADJ_FUNC_SQR
    phi_prime = 1/((pii_ub-pii_lb)^0.5) - 1/((pii-pii_lb)^0.5);
  end
  
  % Phillips curve
  phillips_curve = -pii*phi_prime + epsilon/theta*(inv_X - (epsilon-1)/epsilon) + mu_pii;
  
  rK_plus_qK = rK + qK;
  
  equations;
    resource_residual;
    foc_bond;
    foc_investment;
	  
    phillips_curve;
    mu_pii*(pii-pii_low);
  end;
end;

% Interpolation
var_interp rK_plus_qK_interp c_interp Y_interp pii_interp ;
% Initial
initial rK_plus_qK_interp rK_plus_qK;
initial c_interp c/c_scale;
initial Y_interp Y/Y_scale;
initial pii_interp pii;

% Transition
rK_plus_qK_interp = rK_plus_qK;
c_interp = c/c_scale;
Y_interp = Y/Y_scale;
pii_interp = pii;

pii_max = 1.5;
inv_X_ub = 2.0;
inv_X_lb = 0.0;
K_next_lb = 10.0;
K_next_ub = 60.0;
c_ub = 10;

% Policy
var_policy pii inv_X K_next c mu_pii;
inbound pii pii_low pii_max;
inbound inv_X inv_X_lb inv_X_ub adaptive(ADAPTIVE_FACTOR);
inbound K_next K_next_lb K_next_ub adaptive(ADAPTIVE_FACTOR);
inbound c 0.0 c_ub adaptive(ADAPTIVE_FACTOR);
inbound mu_pii 0.0 10.0;

var_aux Y rK qK qKp profits R rK_plus_qK priceAdjCost Inv expectedCapitalReturn expectedBondReturn L g_future[8] cw_future[8] fw_future[8];

var_output rK R Y K_next pii qK priceAdjCost Inv expectedCapitalReturn expectedBondReturn inv_X c L g_future cw_future fw_future;

model;
  A = 1;

  % capital prices
  qK = (1-delta) - xi/2*(1-(K_next*(1+g)/K)^2);
  qKp = 1 + xi*((1+g)*K_next-K)/K;

  % Eliminate L
  L = ( (1-alpha)*inv_X * A^(1-alpha) * (1+g)^(-alpha) * K^alpha * c^(-sigma) )^(1 / (alpha+eta-1));

  % Factor prices
  rK = alpha*inv_X *A^(1-alpha)*(1+g)^(1-alpha) * K^(alpha-1) * L^(1-alpha);
  w = (1-alpha)*inv_X *A^(1-alpha)*(1+g)^(-alpha)* K^alpha *L^(-alpha);
  
  % Output and total wealth
  Y = A^(1-alpha)*(1+g)^(-alpha)*K^alpha*L^(1-alpha);
  total_wealth = (rK+qK)/(1+g)*K;
  % priceAdjCost = MIN(1/2*theta*(pii-pii_ss)^2*Y,maxPriceAdjCostFactor*Y);
  if price_adj_func==PRICE_ADJ_FUNC_SQR
    priceAdjCost = MIN(((pii-pii_ub)/((pii_ub-pii_lb)^0.5) - 2*(pii-pii_lb)^0.5 + 2*(pii_ub-pii_lb)^0.5) * theta * Y,maxPriceAdjCostFactor*Y);
  end
  profits = (1-inv_X)*Y - priceAdjCost;
  
  g_future' = MIN(MAX(muEps_g + rho_g*g + g_incr',g_lb),g_ub);
  cw_future' = MIN(MAX(muEps_cw + rho_cw*cw + cw_incr',cw_lb),cw_ub);
  fw_future' = MIN(MAX(muEps_fw + rho_fw*fw + fw_incr',fw_lb),fw_ub);
  [rK_plus_qK_future',c_future',Y_future',pii_future'] = GDSGE_INTERP_VEC'(K_next,g_future',cw_future',fw_future');
  c_future' = c_future'*c_scale;
  Y_future' = Y_future'*Y_scale;
  
  % Taylor rule
  R_tilde = R_ss * (pii/pii_ss)^phi_pi * (Y/Y_ss)^phi_Y;
  R = MAX(R_zlb,R_tilde);
  
  % budget
  capitalAdjCost = K_next - (1-delta)/(1+g)*K + xi/2*(K_next-K/(1+g))^2/(K/(1+g));
  resource_residual = Y - (priceAdjCost*priceAdjCostFactor+capitalAdjCost+c);
  
  Inv = K_next - (1-delta)/(1+g)*K;
  
  % Entrepreneurs
  c_times_g' = (1+g_future')^(-sigma) * c_future'^(-sigma);
  euler_investment_future = GDSGE_EXPECT{ (rK_plus_qK_future') * c_times_g' };
  euler_bond_future = GDSGE_EXPECT{ R/pii_future'*c_times_g' };

  foc_bond = -1 + beta*exp(cw)*euler_bond_future/(c^-sigma);
  foc_investment = -1 + beta*exp(fw)*euler_investment_future/(qKp*c^-sigma);
  
  %
  phi_prime = 1/((pii_ub-pii_lb)^0.5) - 1/((pii-pii_lb)^0.5);
  phi_prime_future' = 1/((pii_ub-pii_lb)^0.5) - 1/((pii_future'-pii_lb)^0.5);
  
  % phi_prime = pii-pii_ss;
  % phi_prime_future' = pii_future'-pii_ss;
  
  % Phillips curve
  % quadratic_c = epsilon/theta*(inv_X - (epsilon-1)/epsilon) + beta*GDSGE_EXPECT{cp_future'^(-sigma2)*(1+g')^(1-sigma2)*pii_future'*(pii_future'-pii_ss)*Y_future'}/(cp^(-sigma2) * Y);
  % quadratic_c = epsilon/theta*(inv_X - (epsilon-1)/epsilon) + beta*GDSGE_EXPECT{c_future'^(-sigma1)*(1+g')^(1-sigma1)*pii_future'*(pii_future'-pii_ss)*Y_future'}/(c^(-sigma1) * Y);
  
  % pii_greater = (pii_ss + (pii_ss^2 + 4*quadratic_c)^0.5)/2;
  % phillips_curve = -pii + pii_greater;
  
  if price_adj_func==PRICE_ADJ_FUNC_SQR
    phillips_curve = -pii*phi_prime + epsilon/theta*(inv_X - (epsilon-1)/epsilon) + beta*GDSGE_EXPECT{c_future'^(-sigma)*(1+g_future')^(1-sigma)*pii_future'*phi_prime_future'*Y_future'}/(c^(-sigma) * Y) + mu_pii;
  end
  
  rK_plus_qK = rK + qK;

  expectedCapitalReturn = GDSGE_EXPECT{rK_plus_qK_future'} / qKp;
  expectedBondReturn = GDSGE_EXPECT{R/pii_future'};
  
  equations;
    resource_residual;
	  foc_bond;
	  foc_investment;
	  phillips_curve;
	  mu_pii*(pii-pii_low);
  end;
end;

post_iter;
	% Some statistics
	% Steady state phillips curve slope
	phillipsSlope = 0.5*pii_ss*(pii_ss-pii_lb)^(-3/2);
	phillipsSlope = epsilon / theta / phillipsSlope;
end;

post_simulate_iter;
  if overwrite_current_value==1
    SimuRslt.g(:,GDSGE_t+1) = g_off_grids_t(:,GDSGE_t+1);
    SimuRslt.cw(:,GDSGE_t+1) = cw_off_grids_t(:,GDSGE_t+1);
    SimuRslt.fw(:,GDSGE_t+1) = fw_off_grids_t(:,GDSGE_t+1);
  end
end;

simulate;
  num_periods = 10000;
  num_samples = 24;
  initial K 25.0;
  initial g 0;
  initial cw 0;
  initial fw 0;
  initial shock ceil(shock_num/2);
  
  var_simu rK R Y K_next pii qK priceAdjCost Inv expectedCapitalReturn expectedBondReturn inv_X c L;
  K' = K_next;
  g' = g_future';
  cw' = cw_future';
  fw' = fw_future';
end;