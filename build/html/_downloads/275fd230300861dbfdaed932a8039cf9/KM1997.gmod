%========================================================================================
%   PARAMETERS
%========================================================================================
parameters a c alower sigma betaF betaG alpha Kbar theta;
a = 0.7;        % tradable productivity of farmer
c = 0.3;      % nontradable productivity of farmer
alower=0.9;    % tradable productivity of gatherer

% preferences
sigma=1;      % risk aversion coefficient
betaF=0.95;   % discount factor of farmer
betaG=0.98;   % discount factor of gatherer

% technology
alpha=0.7;    % coefficient of gatherer's production
Kbar=1;       % fixed capital stock

% credit
theta=0.9;

SaveFreq = 200;
PrintFreq = 50;
INTERP_ORDER = 2;
EXTRAP_ORDER = 2;
SIMU_RESOLVE=0; 
SIMU_INTERP=1;  % Use interpolation for fast simulate
IterSaveAll = 0;

%========================================================================================
%  ENDOGENOUS STATES
%========================================================================================
var_state kF omega;
kFPts=41;
kFMin=0.02;
kFMax=0.95;
drift_K = 0.01;
kF=linspace(kFMin,kFMax,kFPts);

omegaPts=40;
omegaMin=0;
omegaMax=0.2;
omega=linspace(omegaMin,omegaMax,omegaPts);

%========================================================================================
%   SHOCKS
%========================================================================================

var_shock A;

shock_num=3;
A = [0.99 1 1.01];
shock_trans = ones(shock_num,shock_num)/shock_num;

[KMesh,omegaMesh] = ndgrid(kF,omega);


%========================================================================================
% STATE TRANSITION FUNCTION: INTERPOLATION Variables subset of Endogenous variables
%========================================================================================
var_policy_init nxF xG eta kFpol R q nbFpol muF;
inbound_init nxF         0  10;
inbound_init xG          0  10;
inbound_init eta         0  1;
inbound_init kFpol       0  Kbar;
inbound_init R           0 10;
inbound_init q           0 10;
inbound_init nbFpol      0 10;      % Transformaion nbFpol = bFpol + theta*q*kFpol
inbound_init muF          0 1;

var_aux_init loglambdaF loglambdaG logaux;

% This corresponds to the T-1 problem
model_init;
    kG     =  Kbar-kF;                        % market clearing for capital state

    % Backout bFpol
    kGpol  =  Kbar-kFpol;                     % market clearing for capital policy
    bFpol = nbFpol;
    bGpol = -bFpol;         % market clearing

    % Backout xG and marginal utility
    Y  =  A*(a+c)*kF + alower*A*kG^alpha;  % aggregate output
    xF = nxF + c*A*kF;  % consumption of farmer

    lambdaF = xF^(-sigma)/(1-eta);   %multiplier for nontradable is eta*lambda
    lambdaG = xG^(-sigma);
    loglambdaF = log(lambdaF);
    loglambdaG = log(lambdaG);    
    aux = (q+A*(a+c)-c*A*eta)*lambdaF;
    logaux = log(aux);

    % In the last period, people consume everything, and qT=0
    xF_next =  (a+c)*kFpol + bFpol;
    xG_next  = alower*kGpol^alpha + bGpol;
    lambdaF_next = xF_next^(-sigma);
    lambdaG_next = xG_next^(-sigma);

    foc_bondG   = 1 - R*betaG*lambdaG_next / lambdaG;
    foc_kG      = q   - betaG*lambdaG_next*alower*alpha*kGpol^(alpha-1)/lambdaG;

    foc_bondF   = 1  -  R*betaF*lambdaF_next / lambdaF   - muF;
    foc_kF      = q  -  betaF*(a+c)*lambdaF_next/lambdaF;
    slack_bF    = muF*nbFpol;
    slack_xF    = eta*nxF;
    budgetF     = q*kFpol +bFpol/R + xF - A*(a+c)*kF - omega*q*Kbar;
    MC_Y = Y - xF - xG;

    equations;
      foc_bondG;
      foc_kG; 
      foc_bondF;
      foc_kF;
      slack_bF;
      slack_xF;
      budgetF;
      MC_Y;
    end;
end;

var_interp loglambdaF_interp loglambdaG_interp logaux_interp q_interp;
%Time iteration update: update of the transition function after  a time iterarion step need to be specified.
loglambdaF_interp = loglambdaF;
loglambdaG_interp = loglambdaG;
logaux_interp     = logaux;
q_interp       = q;

initial loglambdaF_interp loglambdaF;
initial loglambdaG_interp loglambdaG;
initial logaux_interp logaux;
initial q_interp q;

%========================================================================================
%   Endogenous variables or policy  variables: name, and bounds
%========================================================================================
var_policy nxF xG eta kFpol R q nbFpol muF omega_next[3];
inbound nxF         0  2;
inbound xG          0  2;
inbound eta         0  1;
inbound kFpol       0  Kbar;
inbound R           0  1.5 adaptive(1.5);
inbound q           0 10 adaptive(1.5);
inbound nbFpol      0 10 adaptive(1.5);      % Transformaion nbFpol = bFpol + theta*q*kFpol
inbound muF         0 1;
inbound omega_next  0 1;

%====================================================
% Other equilibrium variables
%====================================================
var_aux xF loglambdaF loglambdaG logaux bFpol Y bF; %qlow_next
var_output xF xG Y q R eta muF kFpol omega_next bF;

%====================================================
% MODEL
%====================================================
model;
kG     =  Kbar-kF;                        % market clearing for capital state
Y      =  A*(a+c)*kF + alower*A*kG^alpha;  % aggregate output

bF = q*omega*Kbar - q*kF;

[loglambdaF_next', loglambdaG_next', logaux_next', q_next']=GDSGE_INTERP_VEC'(kFpol,omega_next');
lambdaF_next' = exp(loglambdaF_next');
lambdaG_next' = exp(loglambdaG_next');
aux_next' = exp(logaux_next');

% Backout bFpol
kGpol  =  Kbar-kFpol;                     % market clearing for capital policy
quse = GDSGE_MIN{q_next'};

bFpol = nbFpol - theta*quse*kFpol;
bGpol = -bFpol;         % market clearing
  
% Backout xG and marginal utility
xF = nxF + c*A*kF;  % consumption of farmer
lambdaF = xF^(-sigma)/(1-eta);
lambdaG = xG^(-sigma);
loglambdaF = log(lambdaF);
loglambdaG = log(lambdaG);
aux = (q+A*(a+c)-c*A*eta)*lambdaF;
logaux = log(aux);

mpk_nextplusq'= (alower*A')*alpha*kGpol^(alpha-1)+q_next';
%Aplusqnext'  = A'*(a+c)+q_next';

%====================================================
% calculate the residual equations: 8 equation (= 7+ 1 consistency) and 8 unknown
%====================================================
foc_bondG   = 1 - R*(betaG*GDSGE_EXPECT{lambdaG_next'}) / lambdaG;
foc_kG      = q   - betaG*GDSGE_EXPECT{lambdaG_next'*mpk_nextplusq'}/lambdaG;

foc_bondF   = 1  -  R*(betaF*GDSGE_EXPECT{lambdaF_next'}) / lambdaF   - muF;
foc_kF      = q  -  betaF*GDSGE_EXPECT{aux_next'} /lambdaF   - theta*quse*muF/R;
slack_bF    = muF*nbFpol;
slack_xF    = eta*nxF;
budgetF     = q*kFpol +bFpol/R + xF - A*(a+c)*kF - omega*q*Kbar;
MC_Y = Y - xG - xF;

consis_omega_next' = (q_next'*kFpol + bFpol) - q_next'*omega_next'*Kbar;

   equations;
     foc_bondG;
     foc_kG; 
     foc_bondF;
     foc_kF;
     slack_bF;
     slack_xF;
     budgetF;
     MC_Y;
     consis_omega_next';
    end;
end;

simulate;
   num_periods = 1000;
   num_samples = 100;
   initial kF 0.05;%Kbar - (a/(alower*betaG*alpha))^(1/(alpha-1));
   initial omega 0.01;
   initial shock 2;

   var_simu xF xG Y q R eta muF bF; % some variables
   kF'=kFpol;
   omega' = omega_next';
end;